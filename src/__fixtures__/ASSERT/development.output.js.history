"ImportDeclaration": import { H5 } from './DEBUGGER'; "mode": "development"
"ExpressionStatement": H5.ASSERT(typeof a === 'number', a > 0);
"expr.isCallExpression()": true
"identifier": "H5" "mode": "development" "isH5": true
"ASSERT" "expr.node": H5.ASSERT(typeof a === 'number', a > 0)
"t.isRegExpLiteral(curr)": false
"t.isBinaryExpression(cclone)": true "t.isUnaryExpression(cclone)": false
"t.isRegExpLiteral(curr)": false
"t.isBinaryExpression(cclone)": true "t.isUnaryExpression(cclone)": false
"GENERATED": H5.ASSERT({
  filename: "/src/__fixtures__/ASSERT/code.js",
  line: 4,
  column: 2
}, ["typeof a === 'number'", _left === _right, {
  "typeof a": _left
}], ["a > 0", _left2 > _right2, {
  "a": _left2
}])
"ExpressionStatement": H5.ASSERT(typeof b === 'number', 0 < b);
"expr.isCallExpression()": true
"identifier": "H5" "mode": "development" "isH5": true
"ASSERT" "expr.node": H5.ASSERT(typeof b === 'number', 0 < b)
"t.isRegExpLiteral(curr)": false
"t.isBinaryExpression(cclone)": true "t.isUnaryExpression(cclone)": false
"t.isRegExpLiteral(curr)": false
"t.isBinaryExpression(cclone)": true "t.isUnaryExpression(cclone)": false
"GENERATED": H5.ASSERT({
  filename: "/src/__fixtures__/ASSERT/code.js",
  line: 5,
  column: 2
}, ["typeof b === 'number'", _left3 === _right3, {
  "typeof b": _left3
}], ["0 < b", _left4 < _right4, {
  "b": _right4
}])
"ExpressionStatement": H5.ASSERT(!(a - b));
"expr.isCallExpression()": true
"identifier": "H5" "mode": "development" "isH5": true
"ASSERT" "expr.node": H5.ASSERT(!(a - b))
"t.isRegExpLiteral(curr)": false
"t.isBinaryExpression(cclone)": false "t.isUnaryExpression(cclone)": true
"GENERATED": H5.ASSERT({
  filename: "/src/__fixtures__/ASSERT/code.js",
  line: 6,
  column: 2
}, ["!(a - b)", !_arg, {
  "a - b": _arg
}])
"ExpressionStatement": H5.assertString(typeof a);
"expr.isCallExpression()": true
"identifier": "H5" "mode": "development" "isH5": true
"customMethod" "expr.node": H5.assertString(typeof a)
"GENERATED": H5.assertString({
  filename: "/src/__fixtures__/ASSERT/code.js",
  line: 7,
  column: 2
}, ["typeof a"], [typeof a])
"VariableDeclaration": var _left, _right, _left2, _right2, _left3, _right3, _left4, _right4; "mode": "development"
"ExpressionStatement": _left = typeof a;
"expr.isCallExpression()": false
"ExpressionStatement": _right = 'number';
"expr.isCallExpression()": false
"ExpressionStatement": _left2 = a;
"expr.isCallExpression()": false
"ExpressionStatement": _right2 = 0;
"expr.isCallExpression()": false
"ExpressionStatement": _left3 = typeof b;
"expr.isCallExpression()": false
"ExpressionStatement": _right3 = 'number';
"expr.isCallExpression()": false
"ExpressionStatement": _left4 = 0;
"expr.isCallExpression()": false
"ExpressionStatement": _right4 = b;
"expr.isCallExpression()": false
"ExpressionStatement": _arg = a - b;
"expr.isCallExpression()": false
"VariableDeclaration": var _DEBUGGER = require("./DEBUGGER"); "mode": "development"